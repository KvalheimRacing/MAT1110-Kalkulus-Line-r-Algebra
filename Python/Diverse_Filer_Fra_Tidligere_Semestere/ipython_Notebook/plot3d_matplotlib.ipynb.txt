{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ipython notebook for producing the Matplotlib plots\n",
    "\n",
    "We need the following import statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "from math import *\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then initialize the height and radius of the mountain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "h0 = 2277. \n",
    "R = 4."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following code defines the grid for the function $h(x,y)$ defined by Equation (2.1) in Section 2.1.2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = y = np.linspace(-10., 10., 41)\r\n",
    "xv, yv = np.meshgrid(x, y, indexing='ij', sparse=False)\r\n",
    "\r\n",
    "hv = h0/(1 + (xv**2+yv**2)/(R**2))      # Elevation coordinates (m)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coordinates of the parameterized curve $\\boldsymbol{r}(t)$ defined by Equation 2.2 \n",
    "in Section 2.1.3 are computed as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "s = np.linspace(0, 2*np.pi, 100)\r\n",
    "curve_x = 10*(1 - s/(2*np.pi))*np.cos(s)\r\n",
    "curve_y = 10*(1 - s/(2*np.pi))*np.sin(s)\r\n",
    "curve_z = h0/(1 + 100*(1 - s/(2*np.pi))**2/(R**2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The gradient field of $h(x,y)$ and its grid are produced as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x2 = y2 = np.linspace(-10.,10.,11)\r\n",
    "x2v, y2v = np.meshgrid(x2, y2, indexing='ij', sparse=False)\r\n",
    "h2v = h0/(1 + (x2v**2 + y2v**2)/(R**2)) # Surface on coarse grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dhdx, dhdy = np.gradient(h2v) # dh/dx, dh/dy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Surface plots\n",
    "\n",
    "Figure 2.1 is produced as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(1)\r\n",
    "ax = fig.gca(projection='3d')\r\n",
    "ax.plot_wireframe(xv, yv, hv, rstride=2, cstride=2)\r\n",
    "\r\n",
    "# Simple plot of mountain and parametric curve\r\n",
    "fig = plt.figure(2)\r\n",
    "ax = fig.gca(projection='3d')\r\n",
    "from matplotlib import cm\r\n",
    "ax.plot_surface(xv, yv, hv, cmap=cm.coolwarm, rstride=1, cstride=1)\r\n",
    "\r\n",
    "# add the parametric curve. linewidth controls the width of the curve\r\n",
    "ax.plot(curve_x, curve_y, curve_z, linewidth=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contour plots\n",
    "\n",
    "The following code produces the plots in Figure 2.2 and Figure 2.4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Default two-dimensional contour plot with 7 colored lines\r\n",
    "fig = plt.figure(3)\r\n",
    "ax = fig.gca()\r\n",
    "ax.contour(xv, yv, hv)\r\n",
    "plt.axis('equal')\r\n",
    "\r\n",
    "# Default three-dimensional contour plot\r\n",
    "fig = plt.figure(4)\r\n",
    "ax = fig.gca(projection='3d')\r\n",
    "ax.contour(xv, yv, hv)\r\n",
    "\r\n",
    "# Plot of mountain and contour lines projected on the coordinate planes\r\n",
    "fig = plt.figure(5)\r\n",
    "ax = fig.gca(projection='3d')\r\n",
    "ax.plot_surface(xv, yv, hv, cmap=cm.coolwarm, rstride=1, cstride=1)\r\n",
    "# zdir is the projection axis\r\n",
    "# offset is the offset of the projection plane\r\n",
    "ax.contour(xv, yv, hv, zdir='z', offset=-1000, cmap=cm.coolwarm)\r\n",
    "ax.contour(xv, yv, hv, zdir='x', offset=-10,   cmap=cm.coolwarm)\r\n",
    "ax.contour(xv, yv, hv, zdir='y', offset=10,    cmap=cm.coolwarm)\r\n",
    "\r\n",
    "# View the contours by displaying as an image\r\n",
    "fig = plt.figure(6)\r\n",
    "ax = fig.gca()\r\n",
    "ax.imshow(hv)\r\n",
    "\r\n",
    "# 10 contour lines (equally spaced contour levels)\r\n",
    "fig = plt.figure(7)\r\n",
    "ax = fig.gca()\r\n",
    "ax.contour(xv, yv, hv, 10)\r\n",
    "plt.axis('equal')\r\n",
    "\r\n",
    "# 10 black ('k') contour lines\r\n",
    "fig = plt.figure(8)\r\n",
    "ax = fig.gca()\r\n",
    "ax.contour(xv, yv, hv, 10, colors='k')\r\n",
    "plt.axis('equal')\r\n",
    "\r\n",
    "# Specify the contour levels explicitly as a list\r\n",
    "fig = plt.figure(9)\r\n",
    "ax = fig.gca()\r\n",
    "levels = [500., 1000., 1500., 2000.]\r\n",
    "ax.contour(xv, yv, hv, levels=levels)\r\n",
    "plt.axis('equal')\r\n",
    "\r\n",
    "# Add labels with the contour level for each contour line\r\n",
    "fig = plt.figure(10)\r\n",
    "ax = fig.gca()\r\n",
    "cs = ax.contour(xv, yv, hv)\r\n",
    "plt.clabel(cs)\r\n",
    "plt.axis('equal')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vector field plots\n",
    "\n",
    "Figure 2.3 is produced as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(11)\r\n",
    "ax = fig.gca()\r\n",
    "ax.quiver(x2v, y2v, dhdx, dhdy, color='r',\r\n",
    "          angles='xy', scale_units='xy')\r\n",
    "ax.contour(xv, yv, hv)\r\n",
    "plt.axis('equal')"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}
