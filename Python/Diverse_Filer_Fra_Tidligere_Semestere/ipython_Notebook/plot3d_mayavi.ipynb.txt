{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ipython notebook for producing the Mayavi plots\n",
    "\n",
    "We need the following import statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import mayavi.mlab as plt\n",
    "import os\n",
    "from math import *\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt2\n",
    "from mpl_toolkits.mplot3d import Axes3D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a utility function for showing Mayavi plots through Matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def show_may_mpl(k):\n",
    "    plt.figure(k)\n",
    "    arr = plt.screenshot()\n",
    "    fig = plt2.figure(k)\n",
    "    ax=fig.gca()\n",
    "    ax.imshow(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now initialize the height and radius of the mountain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "h0 = 2277.\n",
    "R = 4."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following code defines the grid for the function $h(x,y)$ defined by Equation (2.1) in Section 2.1.2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = y = np.linspace(-10.,10.,41)\n",
    "xv, yv = np.meshgrid(x, y, indexing='ij', sparse=False)\n",
    "\n",
    "hv = h0/(1 + (xv**2+yv**2)/(R**2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coordinates of the parameterized curve $\\boldsymbol{r}(t)$ defined by Equation 2.2 \n",
    "in Section 2.1.3 are computed as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "s = np.linspace(0, 2*np.pi, 100)\n",
    "curve_x = 10*(1 - s/(2*np.pi))*np.cos(s)\n",
    "curve_y = 10*(1 - s/(2*np.pi))*np.sin(s)\n",
    "curve_z = h0/(1 + 100*(1 - s/(2*np.pi))**2/(R**2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The gradient field of $h(x,y)$ and its grid are produced as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x2 = y2 = np.linspace(-10.,10.,11)\n",
    "x2v, y2v = np.meshgrid(x2, y2, indexing='ij', sparse=False)\n",
    "h2v = h0/(1 + (x2v**2 + y2v**2)/(R**2)) # Surface on coarse grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dhdx, dhdy = np.gradient(h2v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Surface plots\n",
    "\n",
    "Figure 2.5 is produced as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# Create a figure with white background and black foreground\n",
    "plt.figure(1, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "# 'representation' controls the plot type, here a wireframe plot\n",
    "plt.surf(xv, yv, hv, extent=(0,1,0,1,0,1), representation='wireframe')\n",
    "# Decorate axes (nb_labels is the number of labels in each direction)\n",
    "plt.axes(xlabel='x', ylabel='y', zlabel='z', nb_labels=5,\n",
    "         color=(0., 0., 0.))\n",
    "# Decorate the plot with a title (size is the size of the title)\n",
    "plt.title('h(x,y)', size=0.4)\n",
    "\n",
    "# Simple plot of mountain and parametric curve.\n",
    "plt.figure(2, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "# The default for 'representation' is to color the surface elements.\n",
    "plt.surf(xv, yv, hv, extent=(0,1,0,1,0,1))\n",
    "# Add the parametric curve. tube_radius is the width of the curve\n",
    "# (use 'extent' for auto-scaling)\n",
    "plt.plot3d(curve_x, curve_y, curve_z, tube_radius=0.2,\n",
    "           extent=(0,1,0,1,0,1))\n",
    "\n",
    "plt.figure(3, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "# Use 'warp_scale' for vertical scaling\n",
    "plt.surf(xv, yv, hv, warp_scale=0.01, color=(.5, .5, .5))\n",
    "plt.plot3d(curve_x, curve_y, 0.01*curve_z, tube_radius=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for k in range(1,4):\n",
    "    show_may_mpl(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Subplots\n",
    "\n",
    "Figure 2.6 is produced by the following code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure(4, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.mesh(xv, yv, hv, extent=(0, 0.25, 0, 0.25, 0, 0.25),\n",
    "         colormap='cool')\n",
    "plt.outline(plt.mesh(\n",
    "    xv, yv, hv,\n",
    "    extent=(0.375, 0.625, 0, 0.25, 0, 0.25),\n",
    "    colormap='Accent'))\n",
    "plt.outline(plt.mesh(\n",
    "    xv, yv, hv, extent=(0.75, 1, 0, 0.25, 0, 0.25),\n",
    "    colormap='prism'), color=(.5, .5, .5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "show_may_mpl(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contour plots\n",
    "\n",
    "The following code produces Figure 2.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Default contour plot plotted together with surf.\n",
    "plt.figure(5, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.surf(xv, yv, hv, warp_scale=0.01)\n",
    "plt.contour_surf(xv, yv, hv, warp_scale=0.01)\n",
    "\n",
    "# 10 contour lines (equally spaced contour levels).\n",
    "plt.figure(6, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.contour_surf(xv, yv, hv, contours=10, warp_scale=0.01)\n",
    "\n",
    "# 10 contour lines (equally spaced contour levels) together with surf.\n",
    "# Black color for contour lines.\n",
    "plt.figure(7, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.surf(xv, yv, hv, warp_scale=0.01)\n",
    "plt.contour_surf(xv, yv, hv, contours=10, color=(0., 0., 0.), \\\n",
    "                 warp_scale=0.01)\n",
    "\n",
    "# Specify the contour levels explicitly as a list.\n",
    "plt.figure(8, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "levels = [500., 1000., 1500., 2000.]\n",
    "plt.contour_surf(xv, yv, hv, contours=levels, warp_scale=0.01)\n",
    "\n",
    "# View the contours by displaying as an image.\n",
    "plt.figure(9, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.imshow(hv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for k in range(5,10):\n",
    "    show_may_mpl(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vector field plots\n",
    "\n",
    "Figure 2.8 is produced as follows. The figure in the book is a rotated version of this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure(11, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "plt.contour_surf(xv, yv, hv, contours=20, warp_scale=0.01)\n",
    "\n",
    "# mode controls the style how vectors are drawn\n",
    "# color controls the colors of the vectors\n",
    "# scale_mode='none' ensures that vectors are drawn with the same length\n",
    "plt.quiver3d(x2v, y2v, 0.01*h2v, dhdx, dhdy, np.zeros_like(dhdx),\n",
    "             mode='arrow', color=(1,0,0), scale_mode='none')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "show_may_mpl(11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Animations\n",
    "\n",
    "In the following code the function $h(x,y)$ is scaled vertically,\n",
    "for different scaling constants between $0$ and $1$,\n",
    "and each plot is saved in its own file.\n",
    "The files can then be combined to a standard video file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure(13, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "s = plt.surf(xv, yv, hv, warp_scale=0.01)\n",
    "\n",
    "for i in range(10):\n",
    "    # s.mlab_source.scalars is a handle for the values of the surface,\n",
    "    # and is updated here\n",
    "    s.mlab_source.scalars = hv*0.1*(i+1)\n",
    "    plt.savefig('tmp_%04d.png' % i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A 3D scalar field and its gradient field\n",
    "\n",
    "A three-dimensional grid for $g(x,y,z)=z - h(x,y)$ can be computed as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = y = np.linspace(-10.,10.,41)\n",
    "z = np.linspace(0, 50, 41)\n",
    "xv, yv, zv = np.meshgrid(x, y, z, sparse=False, indexing='ij')\n",
    "hv = 0.01*h0/(1 + (xv**2+yv**2)/(R**2))\n",
    "gv = zv - hv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The gradient field of $g$ can be computed as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x2 = y2 = np.linspace(-10.,10.,5)\n",
    "z2 = np.linspace(0, 50, 5)\n",
    "x2v, y2v, z2v = np.meshgrid(x2, y2, z2, indexing='ij', sparse=False)\n",
    "h2v = 0.01*h0/(1 + (x2v**2 + y2v**2)/(R**2))\n",
    "g2v = z2v - h2v\n",
    "dhdx, dhdy, dhdz = np.gradient(g2v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following code produces Figure 2.9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure(12, fgcolor=(.0, .0, .0), bgcolor=(1.0, 1.0, 1.0))\n",
    "# opacity controls how contours are visible through each other\n",
    "plt.contour3d(xv, yv, zv, gv, contours=7, opacity=0.5)\n",
    "# scale_mode='none' says that the vectors should not be scaled\n",
    "plt.quiver3d(x2v, y2v, z2v, dhdx, dhdy, dhdz, mode='arrow',\\\n",
    "             scale_mode='none', opacity=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "show_may_mpl(12)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}
