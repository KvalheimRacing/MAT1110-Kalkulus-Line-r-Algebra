{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "from math import *\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from matplotlib import cm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 3.7.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = y = np.linspace(-1, 1, 50)\n",
    "xv, yv = np.meshgrid(x,y, indexing='ij', sparse=False)\n",
    "zv = xv**2 + 4*yv**2\n",
    "\n",
    "fig = plt.figure(1)\n",
    "ax = fig.gca()\n",
    "ax.contour(xv, yv, zv)\n",
    "plt.axis('equal')\n",
    "plt.title('Default contour plot in 2D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(2)\n",
    "ax = fig.gca(projection='3d')\n",
    "ax.contour(xv, yv, zv)\n",
    "plt.axis('equal')\n",
    "plt.title('Default contour plot in 3D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(3)\n",
    "ax = fig.gca()\n",
    "ax.contour(xv, yv, zv, 10)\n",
    "plt.axis('equal')\n",
    "plt.title('Contour plot with 10 contours')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(4)\n",
    "ax = fig.gca()\n",
    "ax.contour(xv,yv,zv,levels=[0.1, 0.2, 0.3])\n",
    "plt.axis('equal')\n",
    "plt.title('contour plor with 3 specified contours')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(5)\n",
    "ax = fig.gca()\n",
    "levels = np.arange(.1, 1, .1)\n",
    "ax.contour(xv,yv,zv,levels=levels)\n",
    "plt.axis('equal')\n",
    "plt.title('contour plot with 10 specified contours')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(6)\n",
    "ax = fig.gca(projection='3d')\n",
    "ax.plot_wireframe(xv, yv, zv)\n",
    "plt.axis('equal')\n",
    "plt.title('Plot using plot_wireframe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(7)\n",
    "ax = fig.gca(projection='3d')\n",
    "ax.plot_surface(xv, yv, zv, cmap=cm.coolwarm, rstride=1, cstride=1)\n",
    "z = np.linspace(0, 1, 50)\n",
    "ax.plot(x, np.zeros(len(x)), x**2, color='r')\n",
    "ax.plot(np.zeros(len(y)), y, 4*y**2, color='g')\n",
    "plt.axis('equal')\n",
    "plt.title('Plot with contours in other directions.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eksempel 3.7.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "theta = np.linspace(0, 2*np.pi, 50)\n",
    "r = np.linspace(0, 2, 50)\n",
    "fig = plt.figure(8)\n",
    "ax = fig.gca()\n",
    "ax.plot(r,np.exp(-r**2))\n",
    "plt.axis('equal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "rv, thetav = np.meshgrid(r, theta, indexing='ij', sparse=False)\n",
    "fig = plt.figure(9)\n",
    "ax = fig.gca(projection='3d')\n",
    "ax.plot_surface(rv*np.cos(thetav),rv*np.sin(thetav), np.exp(-rv**2), cmap=cm.coolwarm, rstride=1, cstride=1)\n",
    "plt.axis('equal')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eksempel 3.7.10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = np.linspace(1, 3, 50)\n",
    "y = np.linspace(-2, 0, 50)\n",
    "xv, yv = np.meshgrid(x, y, indexing='ij', sparse=False)\n",
    "fig = plt.figure(10)\n",
    "ax = fig.gca(projection='3d')\n",
    "ax.plot_surface(xv, yv, xv**3*yv**2, cmap=cm.coolwarm, rstride=1, cstride=1)\n",
    "ax.plot_surface(xv, yv, 8 + 12*(xv - 2) - 16*(yv + 1), cmap=cm.coolwarm, rstride=1, cstride=1)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}
